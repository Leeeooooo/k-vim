"===============================================================================
" bundle 插件管理和配置项
"===============================================================================

"===============================================================================
" 插件管理
"===============================================================================
call plug#begin('~/.vim/bundle')

" Git & Diff
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

" 状态栏
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 文件浏览 & Icons
Plug 'preservim/nerdtree' |
    \ Plug 'jistr/vim-nerdtree-tabs' |
    \ Plug 'Xuyuanp/nerdtree-git-plugin' |
    \ Plug 'ryanoasis/vim-devicons'

" 标签
Plug 'majutsushi/tagbar'

" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'


" 搜索 & FZF
Plug 'junegunn/fzf',        { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tracyone/fzf-funky',  { 'on': 'FzfFunky' }

" 快速搜索 (CtrlSF)
Plug 'dyng/ctrlsf.vim'

" 终端复制 (OSC52)
Plug 'ojroques/vim-oscyank'

" 语法检查
Plug 'dense-analysis/ale'

" 智能补全 & Copilot
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'npm ci'}
Plug 'github/copilot.vim'
Plug 'honza/vim-snippets'

  " 括号补全 & 注释
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
" Plug 'bronson/vim-trailing-whitespace'

" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'

" 主题 solarized
Plug 'altercation/vim-colors-solarized'

" 多光标 & 区块
Plug 'terryma/vim-expand-region'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/vim-easy-align'

" 匹配增强
Plug 'vim-scripts/matchit.zip'
Plug 'wellle/targets.vim'

" 快速移动
Plug 'easymotion/vim-easymotion'
Plug 'kshenoy/vim-signature'
" quickscope
Plug 'unblevable/quick-scope'

" Undo Tree
Plug 'sjl/gundo.vim'

" tmux
Plug 'christoomey/vim-tmux-navigator'

" 语言支持（按需启用）
"-------------------------------------------------------------------------------
" go
" Plug 'fatih/vim-go'

" rust
" Plug 'rust-lang/rust.vim'

" python
Plug 'hdima/python-syntax', {'for': 'python'}
Plug 'psf/black', {'for': 'python'}
autocmd BufWritePre *.py execute ':Black'
Plug 'fisadev/vim-isort'
let g:vim_isort_map = '<C-i>'
let g:vim_isort_python_version = 'python3'

" javascript
Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript', {'for': 'javascript'}

" markdown
Plug 'plasticboy/vim-markdown', {'for': ['markdown', 'markdown.mkd']}
let g:vim_markdown_folding_disabled=1

" json
Plug 'neoclide/jsonc.vim', {'for': ['json', 'jsonc']}
Plug 'elzr/vim-json', {'for': ['json', 'jsonc']}
let g:vim_json_syntax_conceal = 0

" html
Plug 'mattn/emmet-vim', { 'for': 'html' }

" xml
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }

" less
"Plug 'groenewege/vim-less'
"
"-------------------------------------------------------------------------------


call plug#end()

"===============================================================================
" fugitive
"===============================================================================
nnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gs :Gstatus<CR>

"===============================================================================
" airline
"===============================================================================
" 设置状态栏主题
let g:airline_theme='papercolor'
"安装字体后设置此项
let g:airline_powerline_fonts = 1
" if !exists('g:airline_symbols')
"     let g:airline_symbols = {}
" endif
" 关闭状态显示空白符号计数
" let g:airline#extensions#whitespace#enabled = 0
" let g:airline#extensions#whitespace#symbol = '!'
" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1
" 支持异步 lint 状态联动
let g:airline#extensions#ale#enabled = 1
let g:airline_section_error = airline#section#create_right(['%{airline#extensions#ale#get_error()}'])
let g:airline_section_warning = airline#section#create_right(['%{airline#extensions#ale#get_warning()}'])

"===============================================================================
" nerdtree
"===============================================================================
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
" show bookmarks in nerdtree
let NERDTreeShowBookmarks = 1
" 显示隐藏文件
let g:NERDTreeShowHidden = 1

" 增强NERDTree体验
let g:NERDTreeMinimalUI = 1
let g:NERDTreeChDirMode = 2

" nerdtreetabs
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
" let g:nerdtree_tabs_synchronize_view=0
" let g:nerdtree_tabs_synchronize_focus=0
" 是否自动开启nerdtree
" thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
let g:NERDTreeShowIgnored = 1
let g:NERDTreeGitStatusShowIgnored = 1
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "\uF06A",
    \ "Staged"    : "\uF055",
    \ "Untracked" : "\uF059",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : "☒",
    \ "Unknown"   : "?"
    \ }

"===============================================================================
" tagbar
"===============================================================================
map <Leader>b :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_show_visibility = 1

"===============================================================================
" ctrlspace
"===============================================================================
let g:airline_exclude_preview = 1
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

"===============================================================================
" fzf
"===============================================================================
nnoremap <Leader>p :Files<CR>
nnoremap <Leader>f :History<CR>
nnoremap <Leader>fu :FzfFunky<CR>
nnoremap <Leader>fU :execute 'FzfFunky ' . expand('<cword>')<CR>

"===============================================================================
" ctrlsf
"===============================================================================
nmap \ <Plug>CtrlSFCwordPath<CR>
nnoremap <C-f> :CtrlSF<Space>
let g:ctrlsf_search_mode   = 'async'
let g:ctrlsf_auto_close    = 0
let g:ctrlsf_confirm_save  = 0
let g:ctrlsf_ignore_dir    = ['static/doc','assets','vendor']
let g:ctrlsf_mapping = {
    \  'split' : '<Space>',
    \  'open'  : '<C-o>',
    \  'prev'  : 'p',
    \  'next'  : 'n',
    \  'quit'  : 'q'
    \}

"===============================================================================
" oscyank
"===============================================================================
vnoremap <C-c> :OSCYankVisual<CR>

"===============================================================================
" ale
"===============================================================================
" 关闭内置 LSP，避免和 coc 冲突
let g:ale_disable_lsp           = 1
let g:ale_fix_on_save           = 1
let g:ale_virtualtext_cursor = 0
let g:ale_virtualtext_error = 0
let g:ale_virtualtext_warning = 0
let g:ale_virtualtext_info = 0
let g:ale_virtualtext_hint = 0

let g:ale_linters = {
    \   'python': ['flake8', 'pylint', 'isort'],
    \   'javascript': ['eslint', 'prettier'],
    \   'sh': ['shellcheck'],
    \   'c': ['clang-format'],
    \   'cpp': ['clang-format'],
    \   'markdown': ['markdownlint'],
    \   'json': ['jsonc-eslint-parser'],
    \   'yaml': ['yamllint'],
    \   'dockerfile': ['hadolint'],
    \}
let g:ale_fixers = {
    \   '*': ['trim_whitespace'],
    \   'python': ['black'],
    \   'javascript': ['prettier'],
    \   'typescript': ['prettier'],
    \   'markdown': ['prettier'],
    \   'cpp': ['prettier'],
    \}
    " \   'json': ['prettier'],
    " \   'sh': ['shfmt'],
    " \   'yaml': ['prettier'],
let g:ale_python_flake8_options="--ignore=E121,E123,E126,E226,E24,E704,W503 --max-line-length=120"
let g:ale_shfmt_options = '-i 4 -w'

" 诊断符号与状态栏
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" 快速定位, 上/下一个诊断
nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
nmap <silent> <Leader>en <Plug>(ale_next_wrap)

" 关闭语法检查, 鼠标复制代码时用到, 防止把错误标志给复制了
nnoremap <silent> <Leader>ec :ALEToggle<CR>

" 快速切换 quickfix
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open location panel
        lopen
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>

"===============================================================================
" coc
"===============================================================================
let g:coc_global_extensions = [
    \ 'coc-snippets',
    \ 'coc-protobuf',
    \ 'coc-pairs',
    \ 'coc-html',
    \ 'coc-highlight',
    \ 'coc-git',
    \ 'coc-emmet',
    \ '@hexuhua/coc-copilot@0.0.18',
    \ 'coc-yaml',
    \ 'coc-vimlsp',
    \ 'coc-tsserver',
    \ 'coc-sh',
    \ 'coc-pyright',
    \ 'coc-markdownlint',
    \ 'coc-json',
    \ 'coc-cmake',
    \ 'coc-clangd'
    \ ]

" https://raw.githubusercontent.com/neoclide/coc.nvim/master/doc/coc-example-config.vim

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1) :
    \ CheckBackspace() ? "\<Tab>" :
    \ copilot#Accept("\<Tab>")
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
vmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s)
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"===============================================================================
" copilot
"===============================================================================
" 取消默认 Tab 映射，优先用 coc 或自己触发
let g:copilot_no_tab_map = v:true
inoremap <silent><expr> <Right> copilot#Accept("\<Right>")
inoremap <silent><expr> <M-]> copilot#Next()
inoremap <silent><expr> <M-[> copilot#Previous()
inoremap <silent><expr> <C-j> coc#refresh()

"===============================================================================
" nerdcommenter
"===============================================================================
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDAltDelims_python = 1
let g:NERDDefaultAlign = "left"

"===============================================================================
" rainbow_parentheses
"===============================================================================
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"===============================================================================
" solarized
"===============================================================================
let g:solarized_termtrans = 1
let g:solarized_contrast = "normal"
let g:solarized_visibility = "normal"

"===============================================================================
" vim-expand-region
"===============================================================================
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" Extend the global default
if exists("*expand_region#custom_text_objects")
    call expand_region#custom_text_objects({
    \ 'a]' :1,
    \ 'ab' :1,
    \ 'aB' :1,
    \ 'ii' :0,
    \ 'ai' :0,
    \ })
endif

"===============================================================================
" vim-multiple-cursors
"===============================================================================
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_next_key   = '<C-m>'
let g:multi_cursor_prev_key   = '<C-p>'
let g:multi_cursor_skip_key   = '<C-x>'
let g:multi_cursor_quit_key   = '<Esc>'

"===============================================================================
" vim-easy-align
"===============================================================================
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" Default:
" If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
let g:easy_align_ignore_groups = ['Comment', 'String']

"===============================================================================
" easymotion
"===============================================================================
let g:EasyMotion_smartcase = 1
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

"===============================================================================
" quick-scope
"===============================================================================
let g:qs_highlight_on_keys = ['f','F','t','T']
let g:qs_hi_priority = 2
autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline

"===============================================================================
" gundo
"===============================================================================
nnoremap <silent> <leader>u :GundoToggle<CR>
let g:gundo_prefer_python3=1
